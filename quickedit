#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""
You can use QuickEdit to change the Quick-launch icons on the bottom when
you swipe half the way up the screen from any app. Just start the app, click on
the Quick-launch icon you want to change and then on the new app. That's all!
Further information: http://xengi.de/quickedit 
"""

import sys
import os
import errno
import fileinput

from PySide import QtCore
from PySide import QtGui
from PySide import QtDeclarative
from PySide import QtOpenGL


class AppWrapper(QtCore.QObject):
    def __init__(self, app):
        QtCore.QObject.__init__(self)
        self._app = app
 
    def _name(self):
        return str(self._app.name)

    def _icon(self):
        return str(self._app.icon)

    def _isQL(self):
        return str(self._app.isQL)

    changed = QtCore.Signal()

    name = QtCore.Property(unicode, _name, notify=changed)
    icon = QtCore.Property(unicode, _icon, notify=changed)
    isQL = QtCore.Property(unicode, _isQL, notify=changed)


class AppListModel(QtCore.QAbstractListModel):
    COLUMNS = ('app', )
 
    def __init__(self, apps):
        super(QtCore.QAbstractListModel, self).__init__()
        self._apps = apps
        self.setRoleNames(dict(enumerate(AppListModel.COLUMNS)))
 
    def rowCount(self, parent=QtCore.QModelIndex()):
        return len(self._apps)
 
    def data(self, index, role):
        if index.isValid() and role == AppListModel.COLUMNS.index('app'):
            return self._apps[index.row()]
        return None


class Controller(QtCore.QObject):
    @QtCore.Slot(QtCore.QObject)
    def appSelected(self, wrapper):
        global qlSelected
        global view
        global quickList
        if "quicklaunch" in wrapper._app.desktopfile:
            if qlSelected > -1:
                rc = view.rootContext()
                rc.setContextProperty('quickListModel', AppListModel(updateQuickLaunch()))
            qlSelected = wrapper._app.desktopfile[51:52]
            # print "quicklaunch pressed", wrapper._app.desktopfile[51:52]
        else:
            # print "app pressed", wrapper._app.name
            if qlSelected > -1:
                try:
                    os.symlink(wrapper._app.desktopfile, "/home/user/.local/share/applications/quicklaunchbar" + qlSelected + ".desktop")
                    # print "quick-launch", qlSelected, "updated"
                except OSError, e:
                    if e.errno == errno.EEXIST:
                        os.remove("/home/user/.local/share/applications/quicklaunchbar" + qlSelected + ".desktop")
                        os.symlink(wrapper._app.desktopfile, "/home/user/.local/share/applications/quicklaunchbar" + qlSelected + ".desktop")
                        # print "quick-launch", qlSelected, "force updated"
                qlSelected = -1
                # update quick launch
                rc = view.rootContext()
                rc.setContextProperty('quickListModel', AppListModel(updateQuickLaunch()))


class App(object):
    def __init__(self, name, icon, isQL, desktopfile):
        self.name = name
        self.icon = icon
        self.isQL = isQL
        self.desktopfile = desktopfile

    def __str__(self):
        return self.name


def repairQuickLaunch(quickdirlist):
    global rebootNeeded

    # check if quick-launch links are broken
    for filename in quickdirlist:
        if not os.path.exists(os.readlink(filename)):
            # replace broken links with standard browser
            try:
                os.symlink("/usr/share/applications/browser.desktop", filename)
            except OSError, e:
                if e.errno == errno.EEXIST:
                    os.remove(filename)
                    os.symlink("/usr/share/applications/browser.desktop", filename)
            # print "Broken quick-launch symlink fixed!"

    # check if an app of the quicklaunch was uninstalled and fix it
    reboot = False
    for line in fileinput.input("/home/user/.config/meegotouchhome-nokia/launcherbuttons.data", inplace=1):
        if line.startswith("home\\user\\.local\\share\\applications\\quicklaunchbar"):
            if not line.endswith('=quicklaunchbar/' + line[50:51] + "\n"):
                line = line.replace(line, line[:60] + "quicklaunchbar/" + line[50:51] + "\n")
                reboot = True
        sys.stdout.write(line)
    if reboot:
        print "You need to reboot to repair your quick-launch."
        rebootNeeded = 1


def updateQuickLaunch():
    quicklist = []
    quickdirlist = ["/home/user/.local/share/applications/quicklaunchbar0.desktop",
                    "/home/user/.local/share/applications/quicklaunchbar1.desktop",
                    "/home/user/.local/share/applications/quicklaunchbar2.desktop",
                    "/home/user/.local/share/applications/quicklaunchbar3.desktop"]

    repairQuickLaunch(quickdirlist)

    for filename in quickdirlist:
        f = file(filename)
        lines = f.readlines()
        appname = ""
        appicon = ""
        for line in lines:
            line = line.rstrip()
            if line.startswith("Name=") and appname == "":
                appname = line[5:]
            if line.startswith("Icon="):
                if "/" in line:
                    appicon = line[5:]
                else:
                    appicon = "/usr/share/themes/blanco/meegotouch/icons/" + line[5:] + ".png"
                    if not os.path.isfile(appicon):
                        appicon = "/usr/share/themes/base/meegotouch/icons/" + line[5:] + ".svg"
                        if not os.path.isfile(appicon):
                            appicon = "/usr/share/icons/hicolor/64x64/apps/" + line[5:] + ".png"
        if appname != "" and appicon != "":
            quicklist.append(App(appname, appicon, "1", filename))

    return [AppWrapper(app) for app in quicklist]


if __name__ == "__main__":
    qapp = QtGui.QApplication(sys.argv)
    view = QtDeclarative.QDeclarativeView()
    glw = QtOpenGL.QGLWidget()
    view.setViewport(glw)

    applist = []

    path = "/usr/share/applications/"
    dirList = os.listdir(path)
    for filename in dirList:
        if filename.endswith(".desktop") and not os.path.islink(os.path.join(path, filename)):
            f = file(os.path.join(path, filename))
            lines = f.readlines()
            appname = ""
            appicon = ""
            show = True
            for line in lines:
                line = line.rstrip()
                if line.startswith("Name=") and appname == "":
                    appname = line[5:]
                if line.startswith("Icon="):
                    if "/" in line:
                        appicon = line[5:]
                    else:
                        appicon = "/usr/share/themes/blanco/meegotouch/icons/" + line[5:] + ".png"
                        if not os.path.isfile(appicon):
                            appicon = "/usr/share/themes/base/meegotouch/icons/" + line[5:] + ".svg"
                            if not os.path.isfile(appicon):
                                appicon = "/usr/share/icons/hicolor/64x64/apps/" + line[5:] + ".png"
                if line.startswith("NotShowIn=X-MeeGo"):
                    show = False
            if appname != "" and appicon != "" and show:
                applist.append(App(appname, appicon, "0", path + filename))

    path = "/var/lib/apt-desktop/entries/"
    dirList = os.listdir(path)
    for filename in dirList:
        if not os.path.islink(os.path.join(path, filename)):
            f = file(os.path.join(path, filename))
            lines = f.readlines()
            appname = ""
            appicon = ""
            show = True
            for line in lines:
                line = line.rstrip()
                if line.startswith("Name=") and appname == "":
                    appname = line[5:]
                if line.startswith("Icon="):
                    if "/" in line:
                        appicon = line[5:]
                    else:
                        appicon = "/usr/share/themes/blanco/meegotouch/icons/" + line[5:] + ".png"
                        if not os.path.isfile(appicon):
                            appicon = "/usr/share/themes/base/meegotouch/icons/" + line[5:] + ".svg"
                            if not os.path.isfile(appicon):
                                appicon = "/usr/share/icons/hicolor/64x64/apps/" + line[5:] + ".png"
                if line.startswith("NotShowIn=X-MeeGo"):
                    show = False
            if appname != "" and appicon != "" and show:
                applist.append(App(appname, appicon, "0", path + filename))

    apps = [AppWrapper(app) for app in applist]

    rebootNeeded = 0

    controller = Controller()
    appList = AppListModel(apps)
    quickList = AppListModel(updateQuickLaunch())
    qlSelected = -1

    rc = view.rootContext()
 
    rc.setContextProperty('controller', controller)
    rc.setContextProperty('appListModel', appList)
    rc.setContextProperty('quickListModel', quickList)
    rc.setContextProperty('rebootneeded', rebootNeeded);

    if os.path.exists('/opt/quickedit/qml/'):
        view.setSource('/opt/quickedit/qml/main.qml')
    else:
        view.setSource(os.path.join('qml','main.qml'))

    view.showFullScreen()
    qapp.exec_()
